swagger: "2.0"
info:
  version: "0.0.1"
  title: Stinter Application REST API
# during dev, should point to your local machine
host: localhost:3030
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
# oauth2 security definitions
securityDefinitions:
  oauth2:
    type: oauth2
    scopes:
        read: "allow read"
    flow: password
    tokenUrl: /auth/token
    x-swagger-magic-invalidateTokenUrl: /auth/invalidate
    x-swagger-magic-social:
      services:
        - google
        - facebook
      callback:
        success: http://127.0.0.1:3001/socialAuthSuccess
        failure: http://127.0.0.1:3001/failure
paths:
# Authentication paths and controller
  /auth/socialAuthSuccess:
    x-swagger-router-controller: ctr
    get:
      description: description
      operationId: socialAuthSuccess
      parameters:
        - name: token
          in: query
          description: token
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Response"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth/token:
    x-swagger-router-controller: auth
    post:
      description: "Auth token endpoint"
      summary: "Auth token endpoint"
      operationId: "getToken"
      produces:
        - "application/json"
      tags:
        - Auth
      parameters:
        -
          name: "user"
          in: "body"
          description: "The user"
          required: true
          schema:
            $ref: "#/definitions/AuthTokenRequest"
      responses:
        200:
          description: "Token"
          schema:
            $ref: "#/definitions/AuthToken"
        400:
          description: "Error"
          schema:
            $ref: "#/definitions/AuthError"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/AuthError"
  /auth/invalidate:
    x-swagger-router-controller: auth
    post:
      description: "Auth token endpoint"
      summary: "Auth token endpoint"
      operationId: "invalidateToken"
      produces:
        - "application/json"
      tags:
        - Auth
      parameters:
        -
          name: "token"
          in: "body"
          description: "The token to invalidate"
          required: true
          schema:
            $ref: "#/definitions/InvalidateRequest"
      responses:
        200:
          description: "Success response"
        400:
          description: "Error"
          schema:
            $ref: "#/definitions/AuthError"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/AuthError"
        x-swagger-magic-null: 200
# Hello paths
  /hello:
    # binds app logic to a route
    x-swagger-router-controller: hello/hello_world
    get:
      description: Returns 'Hello' to the caller
      # used as the method name of the controller
      operationId: hello
      parameters:
        - name: name
          in: query
          description: The name of the person to whom to say hello
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/HelloWorldResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
# User paths
  /user:
    x-swagger-router-controller: user/profile
    get:
      description: Returns a list of users
      operationId: listUsers
      parameters:
        - name: name
          in: query
          description: This is used to search users by name
          required: false
          type: string
        - name: role
          in: query
          description: The role of the person to whom to search for
          required: false
          type: string
        - name: email
          in: query
          description: This is used to search users by email
          required: false
          type: string
        - name: joinedDateFrom
          in: query
          description: This should be in epoch time representation. The user is considered matched if he joined after this time.
          required: false
          type: integer
          format: int64
        - name: joinedDateTo
          in: query
          description: This should be in epoch time representation. The blog is considered matched if he joined before this time.
          required: false
          type: integer
          format: int64
        - name: limit
          in: query
          description: The record size limit for pagination, by default it is 10. If it is -1, all users of the challenge will be returned.
          required: false
          type: integer
          format: int32
        - name: offset
          in: query
          description: The starting index for pagination, starting from 0. By default it is 0
          required: false
          type: integer
          format: int32
        - name: sortBy
          in: query
          required: false
          type: string
          description: The sorting fields. OPTIONAL. "joinedDate", "email", "name", "role" are allowed. The default value is "joinedDate".
        - name: sortType
          in: query
          required: false
          type: string
          description: The sorting type. OPTIONAL. "asc", "desc" are allowed. The default value is "desc".
      responses:
        200:
          description: An array of users
          schema:
            type: object
            properties:
              total:
                type: integer
                format: int32
                description: The count of all matched users.
              totalPages:
                type: integer
                format: int32
                description: The total pages of all matched users.
              values:
                type: array
                items:
                  $ref: '#/definitions/User'
        400:
          description: The input or filter is not valid
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates an User
      operationId: createUser
      parameters:
        - name: user
          in: body
          description: The user to add
          required: true
          schema:
            $ref: '#/definition/User'
  /user/{id}:
    x-swagger-router-controller: user/profile
    put:
      operationId: updateProfile
      summary: Update a User Profile.
      description: |
        This method will update a user. It can only be done by the user or the admin.
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: The ID of user.
          required: true
          type: integer
          format: int64
        - name: user
          in: body
          description: The user to update.
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: The updated user
          schema:
            $ref: '#/definitions/User'
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      operationId: viewProfile
      summary: Get a User Profile by ID.
      description: |
        This method will get a User by ID.
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: The ID of user.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The User with given ID.
          schema:
            $ref: '#/definitions/User'
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: removeProfile
      summary: Delete a User Profile by ID.
      description: |
        This method will delete a User by ID. It can only be done by the User himself or admin
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: The ID of User.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The User with given ID is deleted.
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# Blog paths
  /blogs:
    x-swagger-router-controller: blog/blogger
    post:
      operationId: createBlog
      summary: Create a Blog
      description: |
        This method will create a blog.
      tags:
        - Blog
      parameters:
        - name: blog
          in: body
          description: The blog to create
          required: true
          schema:
            $ref: '#/definitions/Blog'
      responses:
        201:
          description: The created blog
          schema:
            $ref: '#/definitions/Blog'
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      operationId: listBlogs
      summary: List Blogs
      description: |
        This method returns the blogs that matches filter.
      parameters:
        - name: handle
          in: query
          description: This is used to search the blogs by Topcoder handle of author.
          required: false
          type: string
        - name: slug
          in: query
          description: This is used to search the blogs by slug.
          required: false
          type: string
        - name: tags
          in: query
          description: This is used to search the blogs by tags. This criteria is separated by commas. The blog is considered matched if the blog contains at least one tag in this criteria.
          required: false
          type: string
        - name: title
          in: query
          description: This is used to search the blogs by title.
          required: false
          type: string
        - name: keyword
          in: query
          description: This is used to search the blogs by keyword. The blog is considered matched if the title or content or tags contains the keyword.
          required: false
          type: string
        - name: publishedDateFrom
          in: query
          description: This should be in epoch time representation. The blog is considered matched if it's published after this time.
          required: false
          type: integer
          format: int64
        - name: publishedDateTo
          in: query
          description: This should be in epoch time representation. The blog is considered matched if it's published before this time.
          required: false
          type: integer
          format: int64
        - name: limit
          in: query
          description: The record size limit for pagination, by default it is 10. If it is -1, all blogs of the challenge will be returned.
          required: false
          type: integer
          format: int32
        - name: offset
          in: query
          description: The starting index for pagination, starting from 0. By default it is 0
          required: false
          type: integer
          format: int32
        - name: sortBy
          in: query
          required: false
          type: string
          description: The sorting fields. OPTIONAL. "publishedDate", "numOfComments", "numOfViews", "numOfUpVotes", "numOfDownVotes" are allowed. The default value is "publishedDate".
        - name: sortType
          in: query
          required: false
          type: string
          description: The sorting type. OPTIONAL. "asc", "desc" are allowed. The default value is "desc".
      tags:
        - Blog
      responses:
        200:
          description: An array of blogs
          schema:
            type: object
            properties:
              total:
                type: integer
                format: int32
                description: The count of all matched blogs.
              totalPages:
                type: integer
                format: int32
                description: The total pages of all matched blogs.
              values:
                type: array
                items:
                  $ref: '#/definitions/Blog'
        400:
          description: The input or filter is not valid
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /blogs/{id}:
    x-swagger-router-controller: blog/blogger
    put:
      operationId: updateBlog
      summary: Update a Blog.
      description: |
        This method will update a blog. It can only be done by the author of blog.
      tags:
        - Blog
      parameters:
        - name: id
          in: path
          description: The ID of blog.
          required: true
          type: integer
          format: int64
        - name: blog
          in: body
          description: The blog to update.
          required: true
          schema:
            $ref: '#/definitions/Blog'
      responses:
        200:
          description: The updated blog
          schema:
            $ref: '#/definitions/Blog'
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      operationId: viewBlog
      summary: Get a Blog by ID.
      description: |
        This method will get a blog by ID.
      tags:
        - Blog
      parameters:
        - name: id
          in: path
          description: The ID of blog.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The blog with given ID.
          schema:
            $ref: '#/definitions/Blog'
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: removeBlog
      summary: Delete a Blog by ID.
      description: |
        This method will delete a blog by ID. It can only be done by the author of blog. Both of published or unpublished blogs can be deleted.
      tags:
        - Blog
      parameters:
        - name: id
          in: path
          description: The ID of blog.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The blog with given ID is deleted.
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /blogs/{id}/publish:
    x-swagger-router-controller: blog/blogger
    post:
      operationId: publishBlog
      summary: Publish a Blog
      description: |
        This method will publish a unpublished blog. It can only be done by the author of blog.
      tags:
        - Blog
      parameters:
        - name: id
          in: path
          description: The ID of blog
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The publishd blog
          schema:
            $ref: '#/definitions/Blog'
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /blogs/{id}/markread:
    x-swagger-router-controller: blog/blogger
    post:
      operationId: markRead
      summary: Mark a Blog as Viewed
      description: |
        This method will mark a blog as viewed by current user. A blog can be marked as viewed by the same user for at most once. The current user should not be the author of blog.
      tags:
        - Blog
      parameters:
        - name: id
          in: path
          description: The ID of blog
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The blog is marked as viewed by current user.
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /blogs/{id}/upvote:
    x-swagger-router-controller: blog/votes
    post:
      operationId: upVote
      summary: Up-Vote a Blog
      description: |
        This method will up-vote a blog by current user. A blog can be up-voted by the same user for at most once. The author of blog cannot vote for the his/her blog.
      tags:
        - Blog
      parameters:
        - name: id
          in: path
          description: The ID of blog
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The blog is up-voted by current user.
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /blogs/{id}/downvote:
    x-swagger-router-controller: blog/votes
    post:
      operationId: downVote
      summary: Down-Vote a Blog
      description: |
        This method will down-vote a blog by current user. A blog can be up-voted by the same user for at most once. The author of blog cannot vote for the his/her blog.
      tags:
        - Blog
      parameters:
        - name: id
          in: path
          description: The ID of blog
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The blog is down-voted by current user.
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /blogs/{id}/comments:
    x-swagger-router-controller: blog/comments
    post:
      operationId: addComment
      summary: Add a Comment
      description: |
        This method will add a comment for the blog.
      tags:
        - Blog
        - Comment
      parameters:
        - name: id
          in: path
          description: The ID of blog.
          required: true
          type: integer
          format: int64
        - name: comment
          in: body
          description: The comment to add.
          required: true
          schema:
            $ref: '#/definitions/Comment'
      responses:
        200:
          description: The created comment
          schema:
            $ref: '#/definitions/Comment'
        400:
          description: The input is not valid.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /blogs/{blogId}/comments/{commentId}:
    x-swagger-router-controller: blog/comments
    put:
      operationId: updateComment
      summary: Update a Comment
      description: |
        This method will update a comment. It can only be done by the author of comment.
      tags:
        - Blog
        - Comment
      parameters:
        - name: blogId
          in: path
          description: The ID of blog.
          required: true
          type: integer
          format: int64
        - name: commentId
          in: path
          description: The ID of comment.
          required: true
          type: integer
          format: int64
        - name: comment
          in: body
          description: The comment to update
          required: true
          schema:
            $ref: '#/definitions/Comment'
      responses:
        200:
          description: The updated comment
          schema:
            $ref: '#/definitions/Comment'
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: removeComment
      summary: Delete a Comment
      description: |
        This method will delete a comment. It can only be done by the author of comment, or the author of blog.
      tags:
        - Blog
        - Comment
      parameters:
        - name: blogId
          in: path
          description: The ID of blog.
          required: true
          type: integer
          format: int64
        - name: commentId
          in: path
          description: The ID of comment.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The comment is deleted.
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /blogs/{blogId}/comments/{commentId}/like:
    x-swagger-router-controller: blog/comments
    post:
      operationId: likeComment
      summary: Like a Comment
      description: |
        This method will make a comment as liked by current user. The author of comment cannot mark the his/her comment as liked.
      tags:
        - Blog
        - Comment
      parameters:
        - name: blogId
          in: path
          description: The ID of blog
          required: true
          type: integer
          format: int64
        - name: commentId
          in: path
          description: The ID of comment
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The blog is marked as liked by current user.
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /blogs/{blogId}/comments/{commentId}/dislike:
    x-swagger-router-controller: blog/comments
    post:
      operationId: dislikeComment
      summary: Dislike a Comment
      description: |
        This method will make a comment as disliked by current user. The author of comment cannot mark the his/her comment as disliked.
      tags:
        - Blog
        - Comment
      parameters:
        - name: blogId
          in: path
          description: The ID of blog
          required: true
          type: integer
          format: int64
        - name: commentId
          in: path
          description: The ID of comment
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The blog is marked as disliked by current user.
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# complex objects have schema definitions
definitions:
# Auth Definitions
  AuthTokenRequest:
    required:
      - username
      - password
    properties:
      username:
        type: "string"
      password:
        type: "string"
  InvalidateRequest:
    required:
      - token
    properties:
      token:
        type: "string"
  AuthToken:
    required:
      - "access_token"
    properties:
      access_token:
        type: "string"
      scope:
        type: "string"
  AuthError:
    required:
      - "message"
    properties:
      message:
        type: "string"
# Hello definitions
  HelloWorldResponse:
    required:
      - message
    properties:
      message:
        type: string
# Error definitions
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  Error:
    properties:
      code:
        type: string
        description: The error code that refers the error type.
      message:
        type: string
        description: The error message.
# Blog definitions
  Blog:
    properties:
      id:
        type: integer
        format: int64
        description: Unique identifier of the blog
      title:
        type: string
        description: The title of the blog
      slug:
        type: string
        description: The slug of the blog (so if the title is "My First Java Post", the slug would be "my-first-java-post")
      publishedDate:
        type: integer
        format: int64
        description: The published date of the blog, in the epoch time representation.
      createdDate:
        type: integer
        format: int64
        description: The created date of the blog, in the epoch time representation.
      lastUpdatedDate:
        type: integer
        format: int64
        description: The last update date of the blog, in the epoch time representation.
      author:
        $ref: '#/definitions/User'
        description: The author of blog.
      tags:
        type: array
        description: The list of blog tags.
        items:
          $ref: '#/definitions/Tag'
      content:
        type: string
        description: The actual content of the blog.
      isPublished:
        type: boolean
        description: The flag indicating if the blog is published.
      comments:
        type: array
        description: The list of comments on the blog.
        items:
          $ref: '#/definitions/Comment'
      numOfViews:
        type: integer
        format: int32
        description: The count of views for the blog.
      numOfUpVotes:
        type: integer
        format: int32
        description: The count of up-votes for the blog.
      numOfDownVotes:
        type: integer
        format: int32
        description: The count of down-votes for the blog.
  Tag:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the tag.
      name:
        type: string
        description: The tag name (which is all that the tag is about).
  Comment:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of comment
      content:
        type: string
        description: The content of comment
      postedDate:
        type: integer
        format: int64
        description: The date time when the comment is posted. It is in epoch time representation.
      lastUpdatedDate:
        type: integer
        format: int64
        description: The last date time when the comment is updated. It is in epoch time representation.
      author:
        $ref: '#/definitions/User'
        description: The author of blog.
      numOfLikes:
        type: integer
        format: int32
        description: The count of likes for the blog.
      numOfDislikes:
        type: integer
        format: int32
        description: The count of dislikes for the blog.
# User Management definitions
  User:
    properties:
      id:
        type: integer
        format: int64
        description: The id of user
      username:
        type: string
        description: The username of user
      password:
        type: password
        description: The password of user
      email:
        type: string
        description: The primary email of user
      profileImage:
        type: string
        description: The url of the primary profile image for the user
      timeCreated:
        type: date
        description: The date this user was created
      status:
        type: string
        description: The current state of the user, one of 'active', 'blocked', 'deactive'
      profile:
        type: object
        description: The variations on the profile type for an user.
        properties:
          account:
            $ref: '#/definitions/Account'
          stinter:
            $ref: '#/definition/Stinter'
          admin:
            $ref: '#/definitions/Admin'
      role:
        type: array
        items:
          $ref: '#/definition/Role'
      isVerified:
        type: boolean
        description: Specifies if the account is verified or not
      verificationToken:
        type: string
        description: The token used for verification
      provider:
        type: string
        description:
  Account:
    properties:
      id:
        type: integer
        format: int64
        description: The id of user
      name:
        type: object
        properties:
          familyName:
            type: string
            description: The family name of this user, or "last name" in most Western languages
          givenName:
            type: string
            description: The given name of this user, or "first name" in most Western languages
          middleName:
            type: string
            description: The middle name of this user
      displayName:
        type: string
        description: The disply name of the user
      phone:
        type: string
        description: The phone number of the user
      address:
        type: string
        description: The primary address of the user
      zip:
        type: interger
        format: int64
        description: The postal code of the users primary address
      lat:
        type: number
        description: The latitude of users primary address
      long:
        type: number
        description: The longitude of the users primary address
      image:
        type: array
        description: The list of profile images for the user
        item:
          $ref: '#/definitions/Image'
      emails:
        type: array
        description: The list of additional emails for the user
        item:
          $ref: '#/definition/Email'
      notes:
        type: string
        description: Additional infromation for the user
      twitter:
        type: string
        description: The twitter id of the user
      facebook:
        type: string
        description: The facebook id of the user
      google:
        type: string
        description: The google id of the user
      github:
        type: string
        description: The github id of the user
  Stinter:
    properties:
      id:
        type: integer
        format: int64
        description: The id of user
      ratings:
        type: interger
        format: int64
        description: The ratings of the stinter, integer on a scale of 1 - 5
      jobsCompleted:
        type: integer
        format: int64
        description: The total number of jobs completed by this stinter
  Admin:
    properties:
      id:
        type: integer
        format: int64
        description: The id of user
      displayName:
        type: string
        description: The disply name of the user
  Role:
    properties:
      id:
        type: integer
        format: int64
        description: The id of the Role
      name:
        type: string
        description: The name of the role
      description:
        type: string
        description: The roles description
      isInternal:
        type: boolean
        description: If set to true this role will not be displayed in the UI
      scopes:
        type: array
        description: The list of permission scopes for this role
        items:
          $ref: '#/definitions/Scope'
  Scope:
    properties:
      id:
        type: integer
        format: int64
        description: The id for the scope
      value:
        type: string
        description: The permission value for the scope
      description:
        type: string
        description: Descripes the scope permission in the app
  Email:
    properties:
      email:
        type: string
        description: The email address of the user
      isVerified:
        type: boolean
        description: Is used to mark if the user as activated his account via this email
      sendNotifications:
        type: boolean
        description: marks this email address to send notification to the user
  Image:
    properties:
      url:
        type: string
        description: The image url for the user
