# User paths
paths:
  /user:
    x-swagger-router-controller: user/profile
    get:
      description: Returns a list of users
      operationId: listUsers
      parameters:
        - name: name
          in: query
          description: This is used to search users by name
          required: false
          type: string
        - name: role
          in: query
          description: The role of the person to whom to search for
          required: false
          type: string
        - name: email
          in: query
          description: This is used to search users by email
          required: false
          type: string
        - name: joinedDateFrom
          in: query
          description: This should be in epoch time representation. The user is considered matched if he joined after this time.
          required: false
          type: integer
          format: int64
        - name: joinedDateTo
          in: query
          description: This should be in epoch time representation. The blog is considered matched if he joined before this time.
          required: false
          type: integer
          format: int64
        - name: limit
          in: query
          description: The record size limit for pagination, by default it is 10. If it is -1, all users of the challenge will be returned.
          required: false
          type: integer
          format: int32
        - name: offset
          in: query
          description: The starting index for pagination, starting from 0. By default it is 0
          required: false
          type: integer
          format: int32
        - name: sortBy
          in: query
          required: false
          type: string
          description: The sorting fields. OPTIONAL. "joinedDate", "email", "name", "role" are allowed. The default value is "joinedDate".
        - name: sortType
          in: query
          required: false
          type: string
          description: The sorting type. OPTIONAL. "asc", "desc" are allowed. The default value is "desc".
      responses:
        200:
          description: An array of users
          schema:
            type: object
            properties:
              total:
                type: integer
                format: int32
                description: The count of all matched users.
              totalPages:
                type: integer
                format: int32
                description: The total pages of all matched users.
              values:
                type: array
                items:
                  $ref: '#/definitions/User'
        400:
          description: The input or filter is not valid
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates an User
      operationId: createUser
      parameters:
        - name: user
          in: body
          description: The user to add
          required: true
          schema:
            $ref: '#/definition/User'
  /user/{id}:
    x-swagger-router-controller: user/profile
    put:
      operationId: updateProfile
      summary: Update a User Profile.
      description: |
        This method will update a user. It can only be done by the user or the admin.
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: The ID of user.
          required: true
          type: integer
          format: int64
        - name: user
          in: body
          description: The user to update.
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: The updated user
          schema:
            $ref: '#/definitions/User'
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      operationId: viewProfile
      summary: Get a User Profile by ID.
      description: |
        This method will get a User by ID.
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: The ID of user.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The User with given ID.
          schema:
            $ref: '#/definitions/User'
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: removeProfile
      summary: Delete a User Profile by ID.
      description: |
        This method will delete a User by ID. It can only be done by the User himself or admin
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: The ID of User.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The User with given ID is deleted.
        400:
          description: The input is not valid
          schema:
            $ref: '#/definitions/Error'
        403:
          description: The user is not allowed to perform the update on the resource.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The requested resource doesn't exists
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# User Management definitions
definitions:
  User:
    properties:
      id:
        type: integer
        format: int64
        description: The id of user
      username:
        type: string
        description: The username of user
      password:
        type: password
        description: The password of user
      email:
        type: string
        description: The primary email of user
      profileImage:
        type: string
        description: The url of the primary profile image for the user
      timeCreated:
        type: date
        description: The date this user was created
      status:
        type: string
        description: The current state of the user, one of 'active', 'blocked', 'deactive'
      profile:
        type: object
        description: The variations on the profile type for an user.
        properties:
          account:
            $ref: '#/definitions/Account'
          stinter:
            $ref: '#/definition/Stinter'
          admin:
            $ref: '#/definitions/Admin'
      role:
        type: array
        items:
          $ref: '#/definition/Role'
      isVerified:
        type: boolean
        description: Specifies if the account is verified or not
      verificationToken:
        type: string
        description: The token used for verification
      provider:
        type: string
        description:
  Account:
    properties:
      id:
        type: integer
        format: int64
        description: The id of user
      name:
        type: object
        properties:
          familyName:
            type: string
            description: The family name of this user, or "last name" in most Western languages
          givenName:
            type: string
            description: The given name of this user, or "first name" in most Western languages
          middleName:
            type: string
            description: The middle name of this user
      displayName:
        type: string
        description: The disply name of the user
      phone:
        type: string
        description: The phone number of the user
      address:
        type: string
        description: The primary address of the user
      zip:
        type: interger
        format: int64
        description: The postal code of the users primary address
      lat:
        type: number
        description: The latitude of users primary address
      long:
        type: number
        description: The longitude of the users primary address
      image:
        type: array
        description: The list of profile images for the user
        item:
          $ref: '#/definitions/Image'
      emails:
        type: array
        description: The list of additional emails for the user
        item:
          $ref: '#/definition/Email'
      notes:
        type: string
        description: Additional infromation for the user
      twitter:
        type: string
        description: The twitter id of the user
      facebook:
        type: string
        description: The facebook id of the user
      google:
        type: string
        description: The google id of the user
      github:
        type: string
        description: The github id of the user
  Stinter:
    properties:
      id:
        type: integer
        format: int64
        description: The id of user
      ratings:
        type: interger
        format: int64
        description: The ratings of the stinter, integer on a scale of 1 - 5
      jobsCompleted:
        type: integer
        format: int64
        description: The total number of jobs completed by this stinter
  Admin:
    properties:
      id:
        type: integer
        format: int64
        description: The id of user
      displayName:
        type: string
        description: The disply name of the user
  Role:
    properties:
      id:
        type: integer
        format: int64
        description: The id of the Role
      name:
        type: string
        description: The name of the role
      description:
        type: string
        description: The roles description
      isInternal:
        type: boolean
        description: If set to true this role will not be displayed in the UI
      scopes:
        type: array
        description: The list of permission scopes for this role
        items:
          $ref: '#/definitions/Scope'
  Scope:
    properties:
      id:
        type: integer
        format: int64
        description: The id for the scope
      value:
        type: string
        description: The permission value for the scope
      description:
        type: string
        description: Descripes the scope permission in the app
  Email:
    properties:
      email:
        type: string
        description: The email address of the user
      isVerified:
        type: boolean
        description: Is used to mark if the user as activated his account via this email
      sendNotifications:
        type: boolean
        description: marks this email address to send notification to the user
  Image:
    properties:
      url:
        type: string
        description: The image url for the user
